import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

class ParseTest {


    private static Stream<Arguments> forIndexing() {
        return Stream.of(
                Arguments.of(List.of("\"111\";\"123\";\"222\"",
                        "\"200\";\"123\";\"100\"",
                        "\"212\";\"543\";\"568\"",
                        "\"212\";\"657\";\"453\""), Map.of("\"111\"", List.of("\"111\";\"123\";\"222\""),
                        "\"123\"", List.of("\"111\";\"123\";\"222\"", "\"200\";\"123\";\"100\""),
                        "\"222\"", List.of("\"111\";\"123\";\"222\""),
                        "\"200\"", List.of("\"200\";\"123\";\"100\""),
                        "\"100\"", List.of("\"200\";\"123\";\"100\""),
                        "\"212\"", List.of("\"212\";\"543\";\"568\"", "\"212\";\"657\";\"453\""),
                        "\"543\"", List.of("\"212\";\"543\";\"568\""),
                        "\"568\"", List.of("\"212\";\"543\";\"568\""),
                        "\"657\"", List.of("\"212\";\"657\";\"453\""),
                        "\"453\"", List.of("\"212\";\"657\";\"453\""))),
                Arguments.of(List.of("\"111\";\"123\";\"222\"",
                        "\"200\";\"123\";\"100\"",
                        "\"212\";\"543\";\"568\"",
                        "\"212\";\"657\";\"453\"",
                        "\"83000854422549\"",
                        " \"8383\"200000741652251\""), Map.of("\"111\"", List.of("\"111\";\"123\";\"222\""),
                        "\"123\"", List.of("\"111\";\"123\";\"222\"", "\"200\";\"123\";\"100\""),
                        "\"222\"", List.of("\"111\";\"123\";\"222\""),
                        "\"200\"", List.of("\"200\";\"123\";\"100\""),
                        "\"100\"", List.of("\"200\";\"123\";\"100\""),
                        "\"212\"", List.of("\"212\";\"543\";\"568\"", "\"212\";\"657\";\"453\""),
                        "\"543\"", List.of("\"212\";\"543\";\"568\""),
                        "\"568\"", List.of("\"212\";\"543\";\"568\""),
                        "\"657\"", List.of("\"212\";\"657\";\"453\""),
                        "\"453\"", List.of("\"212\";\"657\";\"453\""))),
                Arguments.of(List.of("\"111\";\"123\";\"222\"",
                        "\"200\";\"123\";\"\"",
                        "\"212\";\"\";\"568\"",
                        "\"212\";\"657\";\"453\"",
                        "\"83000854422549\""), Map.of("\"111\"", List.of("\"111\";\"123\";\"222\""),
                        "\"123\"", List.of("\"111\";\"123\";\"222\"", "\"200\";\"123\";\"\""),
                        "\"222\"", List.of("\"111\";\"123\";\"222\""),
                        "\"200\"", List.of("\"200\";\"123\";\"\""),
                        "\"212\"", List.of("\"212\";\"\";\"568\"", "\"212\";\"657\";\"453\""),
                        "\"568\"", List.of("\"212\";\"\";\"568\""),
                        "\"657\"", List.of("\"212\";\"657\";\"453\""),
                        "\"453\"", List.of("\"212\";\"657\";\"453\"")))
        );
    }

    @ParameterizedTest
    @MethodSource("forIndexing")
    void indexing(List<String> input, Map<String, List<String>> expected) {
        Map<String, List<String>> actual = Parse.indexing(input);
        assertEquals(expected.size(), actual.size());
        assertEquals(expected, actual);
    }

    private static Stream<Arguments> forGrouping() {
        return Stream.of(
                Arguments.of(List.of("\"111\";\"123\";\"222\""),
                        Map.of("\"111\"", List.of("\"111\";\"123\";\"222\""),
                                "\"123\"", List.of("\"111\";\"123\";\"222\""),
                                "\"222\"", List.of("\"111\";\"123\";\"222\"")),
                        List.of(Set.of("\"111\";\"123\";\"222\""))),
                Arguments.of(List.of("\"111\";\"123\";\"222\"", "\"200\";\"123\";\"100\""),
                        Map.of("\"111\"", List.of("\"111\";\"123\";\"222\""),
                                "\"123\"", List.of("\"111\";\"123\";\"222\"", "\"200\";\"123\";\"100\""),
                                "\"222\"", List.of("\"111\";\"123\";\"222\""),
                                "\"200\"", List.of("\"200\";\"123\";\"100\""),
                                "\"100\"", List.of("\"200\";\"123\";\"100\"")),
                        List.of(Set.of("\"111\";\"123\";\"222\"", "\"200\";\"123\";\"100\""))),
                Arguments.of(List.of("\"111\";\"123\";\"222\"",
                        "\"200\";\"123\";\"100\"",
                        "\"212\";\"543\";\"568\"",
                        "\"212\";\"657\";\"453\""),
                        Map.of("\"111\"", List.of("\"111\";\"123\";\"222\""),
                                "\"123\"", List.of("\"111\";\"123\";\"222\"", "\"200\";\"123\";\"100\""),
                                "\"222\"", List.of("\"111\";\"123\";\"222\""),
                                "\"200\"", List.of("\"200\";\"123\";\"100\""),
                                "\"100\"", List.of("\"200\";\"123\";\"100\""),
                                "\"212\"", List.of("\"212\";\"543\";\"568\"", "\"212\";\"657\";\"453\""),
                                "\"543\"", List.of("\"212\";\"543\";\"568\""),
                                "\"568\"", List.of("\"212\";\"543\";\"568\""),
                                "\"657\"", List.of("\"212\";\"657\";\"453\""),
                                "\"453\"", List.of("\"212\";\"657\";\"453\"")),
                        List.of(Set.of("\"111\";\"123\";\"222\"",
                                "\"200\";\"123\";\"100\""),
                                Set.of("\"212\";\"543\";\"568\"",
                                        "\"212\";\"657\";\"453\""))),
                Arguments.of(List.of("\"111\";\"123\";\"222\"",
                        "\"200\";\"123\";\"\"",
                        "\"212\";\"\";\"568\"",
                        "\"212\";\"657\";\"453\"",
                        "\"83000854422549\""),
                        Map.of("\"111\"", List.of("\"111\";\"123\";\"222\""),
                                "\"123\"", List.of("\"111\";\"123\";\"222\"", "\"200\";\"123\";\"\""),
                                "\"222\"", List.of("\"111\";\"123\";\"222\""),
                                "\"200\"", List.of("\"200\";\"123\";\"\""),
                                "\"212\"", List.of("\"212\";\"\";\"568\"", "\"212\";\"657\";\"453\""),
                                "\"568\"", List.of("\"212\";\"\";\"568\""),
                                "\"657\"", List.of("\"212\";\"657\";\"453\""),
                                "\"453\"", List.of("\"212\";\"657\";\"453\"")),
                        List.of(Set.of("\"111\";\"123\";\"222\"",
                                "\"200\";\"123\";\"\""),
                                Set.of("\"212\";\"\";\"568\"",
                                        "\"212\";\"657\";\"453\""))),
                Arguments.of(List.of("\"111\";\"123\";\"222\"",
                        "\"200\";\"123\";\"\"",
                        "\"212\";\"\";\"568\"",
                        "\"212\";\"657\";\"453\"",
                        "\"83000854422549\"",
                        "\"200\";\"657\";\"\""),
                        Map.of("\"111\"", List.of("\"111\";\"123\";\"222\""),
                                "\"123\"", List.of("\"111\";\"123\";\"222\"", "\"200\";\"123\";\"\""),
                                "\"222\"", List.of("\"111\";\"123\";\"222\""),
                                "\"200\"", List.of("\"200\";\"123\";\"\"", "\"200\";\"657\";\"\""),
                                "\"212\"", List.of("\"212\";\"\";\"568\"", "\"212\";\"657\";\"453\""),
                                "\"568\"", List.of("\"212\";\"\";\"568\""),
                                "\"657\"", List.of("\"212\";\"657\";\"453\"", "\"200\";\"657\";\"\""),
                                "\"453\"", List.of("\"212\";\"657\";\"453\"")),
                        List.of(Set.of("\"111\";\"123\";\"222\"",
                                "\"200\";\"123\";\"\"",
                                "\"212\";\"\";\"568\"",
                                "\"212\";\"657\";\"453\"",
                                "\"200\";\"657\";\"\"")))
        );
    }

    @ParameterizedTest
    @MethodSource("forGrouping")
    void grouping(List<String> input, Map<String, List<String>> indexing, List<Set<String>> expected) {
        List<Set<String>> actual = Parse.grouping(input, indexing);
        System.out.println(input);
        System.out.println(actual);
        System.out.println(expected);
        assertTrue(expected.size() == actual.size() && expected.containsAll(actual));
    }
}